import os
import pandas as pd

configfile: "config/All_tissue_male_female_atac_seq.yaml"

sample_metadata = pd.read_csv(config['sample_metadata'])

def get_samples():
    infile = config['sra_acc_list']
    with open(infile) as f:
        samples = f.read().splitlines()
    return samples

def get_tissues():
    return list(sample_metadata.TISSUE.unique())

wildcard_constraints:
    sample = '|'.join(get_samples()),
    read = '|'.join([str(r) for r in config['Reads']]),
    tissue = '|'.join(get_tissues())



rule all:
    input:
        #expand(os.path.join(config['input_dir'],"{sample}_{read}.fastq"), sample=get_samples(), read=config['Reads']),
        #expand(os.path.join(config['fastqc_dir'],"{sample}_{read}_fastqc.html"),
        #    sample=get_samples(),
        #    read=config['Reads']),
        #expand(os.path.join(config['mapping_dir'],'{sample}.sam'),
        #    sample=get_samples()),
        expand(os.path.join(config['mapping_dir'],'{sample}_coverage.bw'), sample=get_samples()),
        #expand(os.path.join(config['mapping_dir'],'{tissue}_coverage.tsv'), tissue=get_tissues()),
        #expand(os.path.join(config['peak_dir'],'{sample}.filteredPeaks.gappedPeak'), sample=get_samples()),
        #expand(os.path.join(config['peak_dir'],'{sample}.filteredSummits.bed'), sample=get_samples()),

rule fastqc:
    input:
        os.path.join(config['input_dir'],"{sample}_{read}.fastq")
    output:
        os.path.join(config['fastqc_dir'],"{sample}_{read}_fastqc.html")
    log:
        "logs/fastqc/{sample}_{read}.log"
    threads: 1
    params:
        outdir=config['fastqc_dir']
    shell:
        """
        module load gcc/11.3.0
        module load intel/2021.6.0
        module load fastqc
        fastqc {input} --outdir={params.outdir}
        """

rule trimming:
    input:
        expand(os.path.join(config['input_dir'],"{{sample}}_{read}.fastq"), read = config['Reads'])
    output:
        forward_paired = os.path.join(config['trimmomatic_dir'],"{sample}_forward_paired.fq.gz"),
        forward_unpaired = os.path.join(config['trimmomatic_dir'],"{sample}_forward_unpaired.fq.gz"),
        reverse_paired = os.path.join(config['trimmomatic_dir'],"{sample}_reverse_paired.fq.gz"),
        reverse_unpaired = os.path.join(config['trimmomatic_dir'],"{sample}_reverse_unpaired.fq.gz")
    #message: "Trimming Illumina adapters from {input.forward_read} and {input.reverse_read}"
    log:
        "logs/trimmomatic/{sample}.log"
    threads: 1
    shell:
        """
        module load trimmomatic
        trimmomatic PE {input} {output.forward_paired} {output.forward_unpaired} {output.reverse_paired} {output.reverse_unpaired} \
        ILLUMINACLIP:{config[adapter]} LEADING:{config[leading]} TRAILING:{config[trailing]} MINLEN:{config[minlen]}
        """

rule bwa_mem2_index:
    input:
        ref=config['genome']
    output:
        done="log/bwa-mem2-index.done"
    shell:
        """
        bwa-mem2 index {input.ref}
        echo "Done" > {output.done}
        """

rule map:
    input:
        forward_paired = os.path.join(config['trimmomatic_dir'],"{sample}_forward_paired.fq.gz"),
        reverse_paired = os.path.join(config['trimmomatic_dir'],"{sample}_reverse_paired.fq.gz"),
        index_done = "log/bwa-mem2-index.done" # this is a dummy input to ensure that the index is built before mapping
    params:
        genome_index = config['genome']
    output:
        os.path.join(config['mapping_dir'],'{sample}.sam')
    threads: 4
    shell:
        "bwa-mem2 mem -t {threads} {params.genome_index} {input.forward_paired} {input.reverse_paired} > {output}"

rule samtools_sort:
    input:
        os.path.join(config['mapping_dir'],'{sample}.sam')
    output:
        os.path.join(config['mapping_dir'],'{sample}_sorted.bam')
    threads: 4
    shell:
        """
        module load gcc/11.3.0
        module load intel/2021.6.0
        module load samtools
        samtools sort {input} -o {output} -@ {threads}
        """

rule samtools_index:
    input:
        os.path.join(config['mapping_dir'],'{sample}_sorted.bam')
    output:
        os.path.join(config['mapping_dir'],'{sample}_sorted.bam.bai')
    threads: 4
    shell:
        """
        module load gcc/11.3.0
        module load intel/2021.6.0
        module load samtools
        samtools index -@ {threads} {input} {output}
        """

rule samtools_genome_info:
    input:
        os.path.join(config['mapping_dir'],'{sample}_sorted.bam')
    output:
        os.path.join(config['mapping_dir'],'{sample}_genome.info')
    shell:
        """
        module load gcc/11.3.0
        module load intel/2021.6.0
        module load samtools
        scripts/samtools_genome_info.sh {input} {output}
        """

rule coverage:
    input:
        bam = os.path.join(config['mapping_dir'],'{sample}_sorted.bam'),
        index = os.path.join(config['mapping_dir'],'{sample}_sorted.bam.bai'),
        genome = os.path.join(config['mapping_dir'],'{sample}_genome.info')
    output:
        os.path.join(config['mapping_dir'],'{sample}_coverage.bw')
    threads: 4
    shell:
        """
        module load gcc/11.3.0
        module load py-deeptools
        bamCoverage -b {input.bam} -o {output} -p {threads} -bs 20 --normalizeUsing CPM --effectiveGenomeSize 2652783500
        """

rule combine_bigwigs:
    input:
        lambda wildcards: [os.path.join(config['mapping_dir'],f'{s}_coverage.bw') for s in sample_metadata.loc[sample_metadata.TISSUE==wildcards.tissue,'Run']]
    params:
        labels = lambda wildcards: list(sample_metadata.loc[sample_metadata.TISSUE==wildcards.tissue,'Sample Name'])
    output:
        npz=os.path.join(config['mapping_dir'],"{tissue}_coverage.npz"),
        tsv=os.path.join(config['mapping_dir'],"{tissue}_coverage.tsv")
    threads: 4
    shell:
        """
        module load gcc/11.3.0
        module load py-deeptools
        multiBigwigSummary bins -b {input} -p {threads} -bs 20 -o {output.npz} --outRawCounts {output.tsv} --labels {params.labels}
        """

rule peak_calling:
    input:
        bam = os.path.join(config['mapping_dir'],'{sample}_sorted.bam'),
        index = os.path.join(config['mapping_dir'],'{sample}_sorted.bam.bai'),
        genome = os.path.join(config['mapping_dir'],'{sample}_genome.info')
    output:
        peak=os.path.join(config['peak_dir'],'{sample}_accessible_regions.gappedPeak'),
        summit=os.path.join(config['peak_dir'],'{sample}_summits.bed')
    shell:
        """
        source activate macs3
        macs3 hmmratac --bam {input.bam} --outdir {config[peak_dir]} --name {wildcards.sample} --save-digested --save-states
        """
#-i {input.index} -g {input.genome} --window {config[hmmratac][window]}

rule filter_peaks:
    input:
        os.path.join(config['peak_dir'],'{sample}_peaks.gappedPeak')
    output:
        os.path.join(config['peak_dir'],'{sample}.filteredPeaks.gappedPeak')
    shell:
        """
        awk -v OFS="\t" '$13>=10 {{print}}' {input} > {output}
        """

rule filter_summits:
    input:
        os.path.join(config['peak_dir'],'{sample}_summits.bed')
    output:
        os.path.join(config['peak_dir'],'{sample}.filteredSummits.bed')
    shell:
        """
        awk -v OFS="\t" '$5>=10 {{print}}' {input} > {output}
        """
